using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Collections.Generic;
using System.Text;
using OpenProtocolInterpreter.TighteningResults;


namespace MIDTesters.Core.TignteningResults
{
    
    [TestClass]
    public class TestMid0900: MidTester
    {
        [TestMethod]
        public void Mid0900Revisions()
        {
            string package = "018109000010        00000005522021-07-07:19:24:550000101050001022130030100000000100010000000035002012021000035.......................................................................018109000010        00000005522021-07-07:19:24:550000201001001022130030100000000100010000000035002012021000035....2.........$...5.9.=.A.C.E.F.I.J.I.K.K.L.K.M.Q.m.......=.>.......\"..";

            var mid = _midInterpreter.Parse(package);

            Assert.AreEqual(typeof(Mid0900), mid.GetType());
            Assert.AreEqual(package, mid.Pack());
        }

        
        [TestMethod]
        public void TestMid900Parse()
        {
            var data = new byte[] { 0x30, 0x31, 0x38, 0x31, 0x30, 0x39, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x35, 0x35, 0x32, 0x32, 0x30, 0x32, 0x31, 0x2d, 0x30, 0x37, 0x2d, 0x30, 0x37, 0x3a, 0x31, 0x39, 0x3a, 0x32, 0x34, 0x3a, 0x35, 0x35, 0x30, 0x30, 0x30, 0x30, 0x32, 0x30, 0x31, 0x30, 0x30, 0x31, 0x30, 0x30, 0x31, 0x30, 0x32, 0x32, 0x31, 0x33, 0x30, 0x30, 0x33, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x35, 0x30, 0x30, 0x32, 0x30, 0x31, 0x32, 0x30, 0x32, 0x31, 0x30, 0x30, 0x30, 0x30, 0x33, 0x35, 0x00, 0x00, 0xe7, 0x01, 0x32, 0x01, 0x89, 0x01, 0xd4, 0x01, 0xfe, 0x02, 0x17, 0x02, 0x24, 0x02, 0x2e, 0x02, 0x35, 0x02, 0x39, 0x02, 0x3d, 0x02, 0x41, 0x02, 0x43, 0x02, 0x45, 0x02, 0x46, 0x02, 0x49, 0x02, 0x4a, 0x02, 0x49, 0x02, 0x4b, 0x02, 0x4b, 0x02, 0x4c, 0x02, 0x4b, 0x02, 0x4d, 0x02, 0x51, 0x02, 0x6d, 0x02, 0x9f, 0x02, 0xd2, 0x03, 0x0c, 0x03, 0x3d, 0x03, 0x3e, 0x03, 0x10, 0x02, 0x8f, 0x01, 0xcb, 0x01, 0x22, 0x00, 0x97 };


            var mid = new Mid0900();
            mid.Parse(data);

            Assert.IsNotNull(mid.TraceSamples);
            Assert.AreEqual(35, mid.TraceSamples.Length);

        }

    }
}
